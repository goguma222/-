**_ 클래스형 컴포넌트 _**

- class 이름
- class App extends Component {}

- 의미 : App 클래스가 component 클래스를 상속한다.
- 사용이유 : 리액트에 component 클래스를 상속함으로써 App 클래스가 리액트 컴포넌트 기능을 사용할 수 있게 한다. 상속을 통해 App 클래스는 리액트의 생명주기 메서드와 상태관리 기능을 포함하게 된다.

- 클래스형 컴포넌트 기본 구조
  import React, { Component } from 'react';

class App extends Component {
// 상태를 정의하는 곳
constructor(props) {
super(props);
this.state = {
// 초기상태
}
}
}

// 생명주기 메서드
componentDidMount() {
// 컴포넌트 마운트된 후 호출된다.
}

componentDidUpdate(prevProps, prevState) {
// 컴포넌트가 업데이트 된 후 호출된다.
}

componentWillUnmount() {
// 컴포넌트가 언마운트되기 전에 호출된다.
}

// 필수 메서드 : render()
render() {
return (

<div>
{/* 렌더링할 JSX 코드 */}
</div>
)
}

**_ 함수 컴포넌트 _**

- 단점 : state와 라이프사이클 API의 사용이 불가능함, 이 단점은 리액트 v16.8 업데이트 이후 Hooks라는 기능이 도입되면서 해결됨

**_ props _**

- props는 properties를 줄인 표현으로 컴포넌트 속성을 설정할 때 사용하는 요소이다.

- 사용방법
  const MyComponent = props => {
  return <div>안녕하세요, 제 이름은{props.name}입니다.</div>
  }

export default MyComponent;


*** 현재 App 컴포넌트가 부모 컴포넌트이고, MyComponent는 자식 컴포넌트이다. ***


*** 태그 사이의 내용을 보여주는 children ***
- 비구조 할당


*** propTypes를 통한 props 검증 ***
- 컴포너는의 필수 props를 지정하거나, props의 타입을 지정할 때는 propTypes사용한다.

- 사용방법 -
import PropTypes From 'prop-types';

const 컴포넌트명 - ({name, children}) => {
  (... 실행구문)
}



*** state ***
- state는 컴포넌트 내부에서 바꿀 수 있는 값

- porp는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정되는 값

- 컴포넌트에 state를 설정할 때는 constructor 메서드를 작성하여 설정한다. ( 컴포넌트 생성자 메서드 )

-- 클래스형 컴포넌트에서 constructor를 작성할 때에는 반드시 super ( props )를 호출해 주어야한다.

-- 그 다음 this.state 값에 초깃값을 설정해준다. 컴포넌트 state는 개체 형식이어야한다.

*** state 주의사항 ***
- state 값을 바꾸어야 할 때는 setState 혹은 useState를 통해 전달받은 세터 함수를 사용해야됨